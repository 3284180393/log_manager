input {
    file {
         type => "cms_log"
         path => ["/home/elk/samples/logs/cms/cms2.log"]
         start_position => "beginning"
         tags => "cms_log"
    }
}
filter {
  grok {
        match => { "message" => "(?<logdate>[0-9\-]+\s[0-9\:]+\.\d+)\s(?<serial_id>\d+\:\d+)\s\[(?<level>\w+)\](\s\S+)?\s\[(?<session_id>0x[a-f0-9]+)\]\s(?<conn_id>0x[0-9a-fA-F]+)\s(?<event_type>orig\:CCODServices\:\:OrigLocal).+origLocal\:(?<calling_number>\d+)\s\origRemote\:(?<dnis_type>\w+)\:(?<dnis>\d+)"  }
        match => { "message" => "(?<logdate>[0-9\-]+\s[0-9\:]+\.\d+)\s(?<serial_id>\d+\:\d+)\s\[(?<level>\w+)\](\s\S+)?\s\[(?<session_id>0x[a-f0-9]+)\]\s\((?<come_from>CMS\s\->\sGW)\)\s(?<event_type>@@sgBlindMakeCallEx)\((?<calling_number>\S+),\s(?<tac>[0-9a-zA-Z])(?<dnis>\S+),.*,\s(?<res_id>\-?\d+),\s(?<call_id>\-?\d+)\)\s\=\s(?<result>\S+)"  }
        match => { "message" => "(?<logdate>[0-9\-]+\s[0-9\:]+\.\d+)\s(?<serial_id>\d+\:\d+)\s\[(?<level>[A-Z]+)\]\s\[(?<session_id>0x[a-f0-9]+)\]\s\((?<come_from>SE)\)\s(?<conn_id>0x[0-9a-f]+),\sCCODServices\:\:(?<event_type>[0-9a-zA-Z]+)\sis\s(?<result>\w+)\:\s\d+\s(?<ani>\d+)/(?<phone_type>\w+)\:(?<dnis>\d+)" }
        match => { "message" => "(?<logdate>[0-9\-]+\s[0-9\:]+\.\d+)\s(?<serial_id>\d+\:\d+)\s\[(?<level>[A-Z]+)\]\s\[(?<session_id>0x[a-f0-9]+)\]\s\((?<direction>[a-zA-Z]+\s\->\s[a-zA-Z]+)\)\s(?<event_type>CreateSession)\(\),\sEnt\:(?<ent_id>.+),\sfrom\s(?<from>.+),\shost\stype\:\s(?<host_type>[a-zA-Z]+\:\:[a-zA-Z]+)"  }
        match => { "message" => "(?<logdate>[0-9\-]+\s[0-9\:]+\.\d+)\s(?<serial_id>\d+\:\d+)\s\[(?<level>[A-Z]+)\]\s\[(?<session_id>0x[a-f0-9]+)\]\s\((?<direction>[a-zA-Z]+\s\->\s[a-zA-Z]+)\)\s(?<event_type>@@mgStartMixRecord)\((?<res_id>\d+),\s(?<call_id>\d+),\s(?<save_path>.+),\s+,.+\)\s=\s(?<result>\S+)$"  }
        match => { "message" => "(?<logdate>[0-9\-]+\s[0-9\:]+\.\d+)\s(?<serial_id>\d+\:\d+)\s\[(?<level>[A-Z]+)\]\s\[(?<session_id>0x[a-f0-9]+)\]\s(?<event_type>MediaID)\:(?<media_id>0x[a-f0-9]+),\sSetRecordType\:\s(?<record_type>[_a-zA-Z0-9]+)\s\->\s(?<tac>\d+)" }
  }
    date {
        match => ["logdate", "yyyy-MM-dd HH:mm:ss.SSS"]
        target => "@timestamp"
        locale => "en"
        timezone => "+00:00"
    }
}
output {
    if "_grokparsefailure" not in [tags] and "_dateparsefailure" not in [tags] {
        stdout {codec => rubydebug}
        elasticsearch {
            index => "cmslog"
            hosts => "localhost:9200"
        }
   }
}
